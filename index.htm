<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="preload"
      href="_next/static/media/a34f9d1faa5f3315-s.p.woff2"
      as="font"
      crossorigin=""
      type="font/woff2"
    />
    <link
      rel="stylesheet"
      href="_next/static/css/bde7ed16c3ff486a.css"
      crossorigin=""
      data-precedence="next"
    />
    <link
      rel="preload"
      as="script"
      fetchpriority="low"
      href="_next/static/chunks/webpack-bc04315c01c03d8c.js"
      crossorigin=""
    />
    <script
      src="_next/static/chunks/30b509c0-82089e7b3225ba1b.js"
      async=""
      crossorigin=""
    ></script>
    <style>
        @media (min-width: 1280px) {
    .xl\:px-\[2vw\] {
        padding-left: 2vw;
        padding-right: 2vw;
        margin-bottom: 2% !important;
    }
}
    </style>
    <script
      src="_next/static/chunks/184-23e8ca0fd8eb75aa.js"
      async=""
      crossorigin=""
    ></script>
    <script
      src="_next/static/chunks/main-app-ee5ea468b114ac39.js"
      async=""
      crossorigin=""
    ></script>
    <script
      src="_next/static/chunks/e64ca62e-9ddc06a344c16179.js"
      async=""
    ></script>
    <script src="_next/static/chunks/349-8d6ad2a46252b064.js" async=""></script>
    <script
      src="_next/static/chunks/app/page-b4341840a5519050.js"
      async=""
    ></script>
    <!-- Three.js library - load first, before other scripts -->
    <script>
      // Load Three.js immediately, before any other scripts
      (function() {
        console.log('Loading Three.js...');
        var script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r144/three.min.js';
        script.onload = function() {
          console.log('Three.js loaded successfully');
          // Move THREE to our namespace immediately
          if (typeof THREE !== 'undefined') {
            window.Sappy3D = window.Sappy3D || {};
            window.Sappy3D.THREE = THREE;
            // Remove global THREE to avoid conflicts
            delete window.THREE;
            console.log('Three.js moved to Sappy3D namespace');
          }
        };
        script.onerror = function() {
          console.error('Failed to load Three.js from CDN, trying alternative...');
          // Try alternative CDN
          var script2 = document.createElement('script');
          script2.src = 'https://unpkg.com/three@0.144.0/build/three.min.js';
          script2.onload = function() {
            console.log('Three.js loaded from alternative CDN');
            if (typeof THREE !== 'undefined') {
              window.Sappy3D = window.Sappy3D || {};
              window.Sappy3D.THREE = THREE;
              delete window.THREE;
            }
          };
          script2.onerror = function() {
            console.error('All Three.js CDN attempts failed');
          };
          document.head.appendChild(script2);
        };
        document.head.appendChild(script);
      })();
    </script>
    <!-- GLTFLoader for 3D models -->
    <script src="GLTFLoader.js"></script>
    <!-- OrbitControls for 3D interaction -->
    <script src="OrbitControls.js"></script>
    <title>Sappy</title>
    <meta name="description" content="Shaping the future of the internet." />
    <meta property="og:title" content="Sappy" />
    <meta
      property="og:description"
      content="Shaping the future of the internet."
    />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content="596" />
    <meta property="og:image:height" content="526" />
    <meta
      property="og:image:alt"
      content="Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"
    />
    <meta
      property="og:image"
      content="https://sappy-55yojjbv1-sappyseals.vercel.app/opengraph-image.png?cbb77dec1be36bc9"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Sappy" />
    <meta
      name="twitter:description"
      content="Shaping the future of the internet."
    />
    <meta name="twitter:image:type" content="image/png" />
    <meta name="twitter:image:width" content="596" />
    <meta name="twitter:image:height" content="526" />
    <meta
      name="twitter:image:alt"
      content="Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"
    />
    <meta
      name="twitter:image"
      content="https://sappy-55yojjbv1-sappyseals.vercel.app/twitter-image.png?cbb77dec1be36bc9"
    />
    <link rel="icon" href="favicon.ico" type="image/x-icon" sizes="176x176" />
    <link
      rel="icon"
      href="icon.png?b7595f33cbcd2108"
      type="image/png"
      sizes="176x176"
    />
    <link
      rel="apple-touch-icon"
      href="apple-icon.png?b7595f33cbcd2108"
      type="image/png"
      sizes="176x176"
    />
    <meta name="next-size-adjust" />
    <script
      src="_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"
      crossorigin=""
      nomodule=""
    ></script>
  </head>
  <body class="__className_d65c78">
    <main
      class="relative bg-white w-screen h-screen overflow-clip text-black"
      style="height: 100svh"
    >
      <!-- 3D Scene Container -->
      <div id="three-container" class="absolute inset-0 z-5"></div>
      <canvas
        class="absolute inset-0 z-10 bg-transparent pointer-events-none"
      ></canvas>
      <div style="width: 100%; height: 100%" class="absolute inset-0 z-0">
        <canvas style="display: none"></canvas>
      </div>
      
      <!-- Interaction hint -->
      <div id="interaction-hint" class="absolute top-4 left-4 z-30 bg-black bg-opacity-50 text-white px-3 py-2 rounded-lg text-sm pointer-events-none opacity-75">
        💡 Перетащите мышкой для вращения и перемещения • Кликните для анимации
      </div>
      <div
        class="absolute flex flex-col gap-3 bottom-0 bg-transparent h-fit justify-between w-full px-[5vw] md:px-[3vw] xl:px-[2vw] pb-3 z-20 "
        style="
    margin-bottom: 2% !important;">
        <hr class="h-[1px] border-current w-full" />
        <div class="flex flex-row items-center">
          <p class="whitespace-nowrap text-[3vw] md:text-lg">Sappy</p>
          <div
            class="flex flex-row w-full gap-2 items-center justify-end text-[2.5vw] md:text-base md:gap-3"
          >
            <a class="relative" href="index.htm"
              ><hr
                class="h-[1px] absolute bottom-0 left-0 w-full border-current"
              />
              Home</a
            ><a class="relative underline-animation" href="seals.html">Monks</a
            ><a class="relative underline-animation" href="seals/staking.html"
              >Dashboard</a
            >
          </div>
        </div>
      </div>
    </main>
    <script
      src="_next/static/chunks/webpack-bc04315c01c03d8c.js"
      crossorigin=""
      async=""
    ></script>
    <script>
      (self.__next_f = self.__next_f || []).push([0]);
      self.__next_f.push([2, null]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '1:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]\n2:HL["/_next/static/css/bde7ed16c3ff486a.css","style",{"crossOrigin":""}]\n0:"$L3"\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '4:I[9070,[],""]\n6:I[6993,[],""]\n7:I[2086,["959","static/chunks/e64ca62e-9ddc06a344c16179.js","349","static/chunks/349-8d6ad2a46252b064.js","931","static/chunks/app/page-b4341840a5519050.js"],""]\n8:I[2070,[],""]\n9:I[8932,[],""]\nb:I[4357,[],""]\nc:[]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '3:[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bde7ed16c3ff486a.css","precedence":"next","crossOrigin":""}]],["$","$L4",null,{"buildId":"GxKkQzvljs9zXyE41YhKe","assetPrefix":"","initialCanonicalUrl":"/","initialTree":["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],"initialSeedData":["",{"children":["__PAGE__",{},["$L5",["$","$L6",null,{"propsForComponent":{"params":{}},"Component":"$7","isStaticGeneration":true}],null]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_d65c78","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\\"Segoe UI\\",Roboto,Helvetica,Arial,sans-serif,\\"Apple Color Emoji\\",\\"Segoe UI Emoji\\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]],"notFoundStyles":[],"styles":null}]}]}],null]],"initialHead":[false,"$La"],"globalErrorComponent":"$b","missingSlots":"$Wc"}]]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        'a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Sappy"}],["$","meta","3",{"name":"description","content":"Shaping the future of the internet."}],["$","meta","4",{"property":"og:title","content":"Sappy"}],["$","meta","5",{"property":"og:description","content":"Shaping the future of the internet."}],["$","meta","6",{"property":"og:image:type","content":"image/png"}],["$","meta","7",{"property":"og:image:width","content":"596"}],["$","meta","8",{"property":"og:image:height","content":"526"}],["$","meta","9",{"property":"og:image:alt","content":"Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"}],["$","meta","10",{"property":"og:image","content":"https://sappy-55yojjbv1-sappyseals.vercel.app/opengraph-image.png?cbb77dec1be36bc9"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"Sappy"}],["$","meta","13",{"name":"twitter:description","content":"Shaping the future of the internet."}],["$","meta","14",{"name":"twitter:image:type","content":"image/png"}],["$","meta","15",{"name":"twitter:image:width","content":"596"}],["$","meta","16",{"name":"twitter:image:height","content":"526"}],["$","meta","17",{"name":"twitter:image:alt","content":"Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"}],["$","meta","18",{"name":"twitter:image","content":"https://sappy-55yojjbv1-sappyseals.vercel.app/twitter-image.png?cbb77dec1be36bc9"}],["$","link","19",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"176x176"}],["$","link","20",{"rel":"icon","href":"/icon.png?b7595f33cbcd2108","type":"image/png","sizes":"176x176"}],["$","link","21",{"rel":"apple-touch-icon","href":"/apple-icon.png?b7595f33cbcd2108","type":"image/png","sizes":"176x176"}],["$","meta","22",{"name":"next-size-adjust"}]]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([1, "5:null\n"]);
    </script>
    <script>
      self.__next_f.push([1, ""]);
    </script>
    
    <!-- 3D Character Script -->
    <script>
      // Create isolated namespace for 3D functionality
      window.Sappy3D = window.Sappy3D || {};
      
      // Global error handler - only for our 3D code
      window.Sappy3D.errorHandler = function(e) {
        // Only handle errors from our 3D code, not React
        if (e.filename && e.filename.includes('three') || 
            e.filename && e.filename.includes('GLTF') ||
            e.filename && e.filename.includes('OrbitControls')) {
          console.error('3D Error caught:', e.error);
          console.error('Error message:', e.message);
          console.error('Error filename:', e.filename);
          console.error('Error line:', e.lineno);
          console.error('Error column:', e.colno);
          console.error('Error stack:', e.error ? e.error.stack : 'No stack trace');
          
          // Display error on screen
          window.Sappy3D.showError('3D Error: ' + e.message + ' at ' + e.filename + ':' + e.lineno);
        }
      };
      
      // Only add error handler if it doesn't conflict with React
      if (!window.Sappy3D.errorHandlerAdded) {
        window.addEventListener('error', window.Sappy3D.errorHandler);
        window.Sappy3D.errorHandlerAdded = true;
      }
      
      // Unhandled promise rejection handler - only for our 3D code
      window.Sappy3D.promiseHandler = function(e) {
        if (e.reason && typeof e.reason === 'string' && 
            (e.reason.includes('three') || e.reason.includes('GLTF') || e.reason.includes('OrbitControls'))) {
          console.error('3D Promise rejection:', e.reason);
          window.Sappy3D.showError('3D Promise Error: ' + e.reason);
        }
      };
      
      if (!window.Sappy3D.promiseHandlerAdded) {
        window.addEventListener('unhandledrejection', window.Sappy3D.promiseHandler);
        window.Sappy3D.promiseHandlerAdded = true;
      }
      
      // Function to show errors on screen
      window.Sappy3D.showError = function(message) {
        let errorDiv = document.getElementById('sappy-3d-error-display');
        if (!errorDiv) {
          errorDiv = document.createElement('div');
          errorDiv.id = 'sappy-3d-error-display';
          errorDiv.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            right: 10px;
            background: #ff6600;
            color: white;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 12px;
            z-index: 10000;
            max-height: 200px;
            overflow-y: auto;
            word-wrap: break-word;
            border: 2px solid #cc4400;
          `;
          document.body.appendChild(errorDiv);
        }
        errorDiv.innerHTML += '<div style="margin-bottom: 10px; border-bottom: 1px solid white; padding-bottom: 5px;">' + message + '</div>';
      };
      
      // Diagnostic function
      window.Sappy3D.runDiagnostics = function() {
        console.log('=== SAPPY 3D DIAGNOSTICS START ===');
        
        // Check if THREE is available
        console.log('THREE object available:', typeof window.Sappy3D.THREE !== 'undefined');
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          const THREE = window.Sappy3D.THREE;
          console.log('THREE version:', THREE.REVISION);
          console.log('THREE.Scene available:', typeof THREE.Scene !== 'undefined');
          console.log('THREE.WebGLRenderer available:', typeof THREE.WebGLRenderer !== 'undefined');
          console.log('THREE.PerspectiveCamera available:', typeof THREE.PerspectiveCamera !== 'undefined');
        }
        
        // Check if OrbitControls is available
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          console.log('THREE.OrbitControls available:', typeof window.Sappy3D.THREE.OrbitControls !== 'undefined');
        }
        
        // Check if GLTFLoader is available
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          console.log('THREE.GLTFLoader available:', typeof window.Sappy3D.THREE.GLTFLoader !== 'undefined');
        }
        
        // Check DOM elements
        console.log('=== DOM DIAGNOSTICS ===');
        console.log('Document body exists:', !!document.body);
        console.log('Main element exists:', !!document.querySelector('main'));
        console.log('All div elements:', document.querySelectorAll('div').length);
        console.log('All elements with id:', document.querySelectorAll('[id]').length);
        
        // Check if container exists
        const container = document.getElementById('three-container');
        console.log('Container element exists:', !!container);
        if (container) {
          console.log('Container dimensions:', container.offsetWidth + 'x' + container.offsetHeight);
          console.log('Container position:', container.offsetTop + ',' + container.offsetLeft);
          console.log('Container style:', container.style.cssText);
        } else {
          console.log('Container not found, checking all elements with "three" in id:');
          document.querySelectorAll('[id*="three"]').forEach(el => {
            console.log('Found element with "three" in id:', el.id, el);
          });
        }
        
        // Check WebGL support
        try {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
          console.log('WebGL supported:', !!gl);
          if (gl) {
            console.log('WebGL vendor:', gl.getParameter(gl.VENDOR));
            console.log('WebGL renderer:', gl.getParameter(gl.RENDERER));
          }
        } catch (e) {
          console.log('WebGL check failed:', e);
        }
        
        // Check loaded scripts
        console.log('All script tags:', document.querySelectorAll('script').length);
        Array.from(document.querySelectorAll('script')).forEach((script, index) => {
          console.log(`Script ${index}:`, script.src || 'inline script');
        });
        
        console.log('=== SAPPY 3D DIAGNOSTICS END ===');
      };
      
      // Wait for all scripts to load
      window.Sappy3D.waitForThree = function() {
        try {
          if (typeof window.Sappy3D.THREE !== 'undefined') {
            console.log('THREE.js is available');
            window.Sappy3D.runDiagnostics();
            window.Sappy3D.init();
          } else {
            console.log('Waiting for THREE.js...');
            setTimeout(window.Sappy3D.waitForThree, 100);
          }
        } catch (e) {
          console.error('Error in waitForThree:', e);
          window.Sappy3D.showError('Error in waitForThree: ' + e.message);
        }
      };
      
      // Initialize Three.js scene
      window.Sappy3D.scene = null;
      window.Sappy3D.camera = null;
      window.Sappy3D.renderer = null;
      window.Sappy3D.character = null;
      window.Sappy3D.controls = null;
      
      window.Sappy3D.init = function() {
        try {
          // Check if THREE is available
          if (typeof window.Sappy3D.THREE === 'undefined') {
            throw new Error('THREE.js not available');
          }
          
          const THREE = window.Sappy3D.THREE;
          console.log('Initializing 3D scene...');
          
          // Create scene
          window.Sappy3D.scene = new THREE.Scene();
          window.Sappy3D.scene.background = new THREE.Color(0xffffff);
          window.Sappy3D.scene.fog = null; // Disable fog
          console.log('Scene created');
          
          // Create camera
          window.Sappy3D.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
          window.Sappy3D.camera.position.set(0, 1.5, 4);
          window.Sappy3D.camera.near = 0.1;
          window.Sappy3D.camera.far = 1000;
          window.Sappy3D.camera.updateProjectionMatrix();
          window.Sappy3D.camera.matrixAutoUpdate = true;
          window.Sappy3D.camera.matrixWorldAutoUpdate = true;
          console.log('Camera created');
          
          // Find or create container
          let container = document.getElementById('three-container');
          if (!container) {
            console.log('Container not found, creating one...');
            container = document.createElement('div');
            container.id = 'three-container';
            container.style.cssText = `
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              z-index: 5;
            `;
            
            // Find main element and add container
            const main = document.querySelector('main');
            if (main) {
              main.insertBefore(container, main.firstChild);
              console.log('Container created and added to main');
            } else {
              document.body.appendChild(container);
              console.log('Container created and added to body');
            }
          } else {
            console.log('Container found:', container);
          }
          
          // Create renderer
          window.Sappy3D.renderer = new THREE.WebGLRenderer({ 
            antialias: true, 
            alpha: true,
            powerPreference: "high-performance",
            stencil: false,
            depth: true,
            logarithmicDepthBuffer: false,
            preserveDrawingBuffer: false,
            failIfMajorPerformanceCaveat: false
          });
          window.Sappy3D.renderer.setSize(window.innerWidth, window.innerHeight);
          window.Sappy3D.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Limit pixel ratio
          window.Sappy3D.renderer.shadowMap.enabled = false; // Отключаем тени для стабильности
          window.Sappy3D.renderer.outputEncoding = THREE.sRGBEncoding;
          window.Sappy3D.renderer.toneMapping = THREE.ACESFilmicToneMapping;
          window.Sappy3D.renderer.toneMappingExposure = 1.0;
          window.Sappy3D.renderer.autoClear = true;
          window.Sappy3D.renderer.autoClearColor = true;
          window.Sappy3D.renderer.autoClearDepth = true;
          window.Sappy3D.renderer.autoClearStencil = true;
          container.appendChild(window.Sappy3D.renderer.domElement);
          console.log('Renderer created and added to container');
          
          // Add lights - только мягкое освещение без теней
          const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
          ambientLight.intensity = 0.8;
          window.Sappy3D.scene.add(ambientLight);
          
          // Добавляем дополнительное мягкое освещение сверху
          const hemisphereLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.6);
          hemisphereLight.position.set(0, 10, 0);
          window.Sappy3D.scene.add(hemisphereLight);
          
          console.log('Lights added - soft lighting only');
          
          // Add a simple cube for testing - без теней
          const geometry = new THREE.BoxGeometry(1, 1, 1);
          const material = new THREE.MeshLambertMaterial({ color: 0x00ff00 }); // Используем Lambert вместо Phong
          const cube = new THREE.Mesh(geometry, material);
          cube.castShadow = false; // Отключаем тени
          cube.receiveShadow = false; // Отключаем тени
          window.Sappy3D.scene.add(cube);
          console.log('Test cube added - no shadows');
          
          // Check if OrbitControls is available
          if (typeof THREE.OrbitControls !== 'undefined') {
            console.log('OrbitControls is available');
            try {
              // Add orbit controls with drag interaction enabled
              window.Sappy3D.controls = new THREE.OrbitControls(window.Sappy3D.camera, window.Sappy3D.renderer.domElement);
              window.Sappy3D.controls.enableDamping = true;
              window.Sappy3D.controls.dampingFactor = 0.1;
              window.Sappy3D.controls.enableZoom = false; // Disable zoom
              window.Sappy3D.controls.enablePan = true; // Enable pan for dragging
              window.Sappy3D.controls.autoRotate = false; // Disable auto rotation
              window.Sappy3D.controls.enableRotate = true; // Keep manual rotation
              window.Sappy3D.controls.rotateSpeed = 0.5; // Slightly faster rotation
              window.Sappy3D.controls.minDistance = 4; // Fixed distance
              window.Sappy3D.controls.maxDistance = 4; // Fixed distance
              window.Sappy3D.controls.minPolarAngle = Math.PI / 3; // Limit vertical rotation
              window.Sappy3D.controls.maxPolarAngle = Math.PI / 2.5; // Limit vertical rotation
              window.Sappy3D.controls.zoomSpeed = 0; // Disable zoom speed
              window.Sappy3D.controls.panSpeed = 0.8; // Pan speed for dragging
              window.Sappy3D.controls.screenSpacePanning = true; // Better panning behavior
              console.log('OrbitControls created with manual control only');
              
              // Add mouse event handlers for better interaction
              window.Sappy3D.renderer.domElement.addEventListener('mousedown', function(event) {
                // Hide interaction hint after first interaction
                const hint = document.getElementById('interaction-hint');
                if (hint) {
                  hint.style.opacity = '0';
                  setTimeout(function() {
                    hint.style.display = 'none';
                  }, 500);
                }
              });
              
              // Add touch support for mobile devices
              window.Sappy3D.renderer.domElement.addEventListener('touchstart', function(event) {
                // Hide interaction hint after first interaction
                const hint = document.getElementById('interaction-hint');
                if (hint) {
                  hint.style.opacity = '0';
                  setTimeout(function() {
                    hint.style.display = 'none';
                  }, 500);
                }
              });
              
              // Add visual feedback for interaction
              window.Sappy3D.renderer.domElement.style.cursor = 'grab';
              window.Sappy3D.renderer.domElement.addEventListener('mousedown', function() {
                window.Sappy3D.renderer.domElement.style.cursor = 'grabbing';
              });
              window.Sappy3D.renderer.domElement.addEventListener('mouseup', function() {
                window.Sappy3D.renderer.domElement.style.cursor = 'grab';
              });
              
              // Add click interaction with the model
              window.Sappy3D.raycaster = new THREE.Raycaster();
              window.Sappy3D.mouse = new THREE.Vector2();
              
              window.Sappy3D.renderer.domElement.addEventListener('click', function(event) {
                // Calculate mouse position in normalized device coordinates
                const rect = window.Sappy3D.renderer.domElement.getBoundingClientRect();
                window.Sappy3D.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
                window.Sappy3D.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
                
                // Check for intersections with the character model
                if (window.Sappy3D.character) {
                  window.Sappy3D.raycaster.setFromCamera(window.Sappy3D.mouse, window.Sappy3D.camera);
                  const intersects = window.Sappy3D.raycaster.intersectObject(window.Sappy3D.character, true);
                  
                  if (intersects.length > 0) {
                    console.log('Clicked on character!');
                    // Add a small bounce effect when clicked
                    const originalScale = window.Sappy3D.character.scale.clone();
                    window.Sappy3D.character.scale.multiplyScalar(1.1);
                    setTimeout(function() {
                      window.Sappy3D.character.scale.copy(originalScale);
                    }, 200);
                  }
                }
              });
              
              // Very smooth animation loop
              let lastTime = performance.now();
              let frameCount = 0;
              let isAnimating = true;
              
              function animate() {
                if (!isAnimating) return;
                
                try {
                  requestAnimationFrame(animate);
                  
                  const currentTime = performance.now();
                  const deltaTime = currentTime - lastTime;
                  
                  // Limit to 30 FPS for maximum stability
                  if (deltaTime < 33) {
                    return;
                  }
                  
                  lastTime = currentTime;
                  frameCount++;
                  
                  // Ensure scene and camera exist
                  if (!window.Sappy3D.scene || !window.Sappy3D.camera || !window.Sappy3D.renderer) {
                    console.warn('Scene, camera, or renderer not available');
                    return;
                  }
                  
                  // Update controls only every few frames for stability
                  if (frameCount % 2 === 0 && window.Sappy3D.controls && window.Sappy3D.controls.update) {
                    window.Sappy3D.controls.update();
                  }
                  
                  // Ensure camera is stable
                  if (window.Sappy3D.camera) {
                    window.Sappy3D.camera.updateMatrix();
                    window.Sappy3D.camera.updateMatrixWorld();
                  }
                  
                  // Clear and render with stable settings
                  window.Sappy3D.renderer.clear();
                  window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
                  
                  // Принудительно обновляем материалы только при необходимости
                  if (window.Sappy3D.character) {
                    window.Sappy3D.character.traverse(function (child) {
                      if (child.isMesh && child.material) {
                        child.material.needsUpdate = false;
                      }
                    });
                  }
                  
                } catch (e) {
                  console.error('Error in animation loop:', e);
                  window.Sappy3D.showError('Animation Error: ' + e.message);
                  isAnimating = false; // Stop animation on error
                }
              }
              animate();
            } catch (e) {
              console.error('Error creating OrbitControls:', e);
              window.Sappy3D.showError('OrbitControls Error: ' + e.message);
              // Fallback to very simple rotation only
              console.log('Falling back to simple rotation only');
              
              let lastTime = performance.now();
              let isAnimating = true;
              
              function animate() {
                if (!isAnimating) return;
                
                try {
                  requestAnimationFrame(animate);
                  
                  const currentTime = performance.now();
                  const deltaTime = currentTime - lastTime;
                  
                  // Limit to 30 FPS for maximum stability
                  if (deltaTime < 33) {
                    return;
                  }
                  
                  lastTime = currentTime;
                  
                  // Ensure scene and camera exist
                  if (!window.Sappy3D.scene || !window.Sappy3D.camera || !window.Sappy3D.renderer) {
                    console.warn('Scene, camera, or renderer not available');
                    return;
                  }
                  
                  // No automatic rotation - only manual control
                  
                  // Clear and render
                  window.Sappy3D.renderer.clear();
                  window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
                } catch (e) {
                  console.error('Error in simple animation loop:', e);
                  window.Sappy3D.showError('Simple Animation Error: ' + e.message);
                  isAnimating = false; // Stop animation on error
                }
              }
              animate();
            }
          } else {
            console.log('OrbitControls not available, using simple rotation only');
            // Very simple rotation only animation loop
            let lastTime = performance.now();
            let isAnimating = true;
            
            function animate() {
              if (!isAnimating) return;
              
              try {
                requestAnimationFrame(animate);
                
                const currentTime = performance.now();
                const deltaTime = currentTime - lastTime;
                
                // Limit to 30 FPS for maximum stability
                if (deltaTime < 33) {
                  return;
                }
                
                lastTime = currentTime;
                
                // Ensure scene and camera exist
                if (!window.Sappy3D.scene || !window.Sappy3D.camera || !window.Sappy3D.renderer) {
                  console.warn('Scene, camera, or renderer not available');
                  return;
                }
                
                // No automatic rotation - only manual control
                
                // Clear and render
                window.Sappy3D.renderer.clear();
                window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
              } catch (e) {
                console.error('Error in simple animation loop:', e);
                window.Sappy3D.showError('Simple Animation Error: ' + e.message);
                isAnimating = false; // Stop animation on error
              }
            }
            animate();
          }
          
          // Check if GLTFLoader is available
          if (typeof THREE.GLTFLoader !== 'undefined') {
            console.log('GLTFLoader is available, loading model...');
            // Load GLB model
            const loader = new THREE.GLTFLoader();
            loader.load(
              'base_basic_shaded.glb',
              function (gltf) {
                try {
                  console.log('Model loaded successfully');
                  window.Sappy3D.character = gltf.scene;
                  window.Sappy3D.character.scale.set(1, 1, 1);
                  window.Sappy3D.character.position.set(0, 0, 0);
                  
                  // Enable shadows for all meshes
                  window.Sappy3D.character.traverse(function (child) {
                    if (child.isMesh) {
                      child.castShadow = false; // Отключаем тени
                      child.receiveShadow = false; // Отключаем тени
                      // Убеждаемся что материал стабилен
                      if (child.material) {
                        child.material.needsUpdate = false;
                        child.material.transparent = false;
                        child.material.opacity = 1.0;
                      }
                    }
                  });
                  
                  window.Sappy3D.scene.add(window.Sappy3D.character);
                  
                  // Remove test cube
                  window.Sappy3D.scene.remove(cube);
                  
                  // Center camera on character
                  const box = new THREE.Box3().setFromObject(window.Sappy3D.character);
                  const center = box.getCenter(new THREE.Vector3());
                  const size = box.getSize(new THREE.Vector3());
                  const maxDim = Math.max(size.x, size.y, size.z);
                  const fov = window.Sappy3D.camera.fov * (Math.PI / 180);
                  let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
                  window.Sappy3D.camera.position.z = cameraZ * 1.5;
                  window.Sappy3D.camera.lookAt(center);
                  if (typeof THREE.OrbitControls !== 'undefined' && window.Sappy3D.controls) {
                    window.Sappy3D.controls.target.copy(center);
                    window.Sappy3D.controls.update();
                  }
                  console.log('Character model setup complete');
                } catch (e) {
                  console.error('Error setting up character model:', e);
                  window.Sappy3D.showError('Character Setup Error: ' + e.message);
                }
              },
              function (xhr) {
                console.log((xhr.loaded / xhr.total * 100) + '% loaded');
              },
              function (error) {
                console.error('An error happened loading the model:', error);
                window.Sappy3D.showError('Model Load Error: ' + error.message);
              }
            );
          } else {
            console.error('GLTFLoader not available');
            window.Sappy3D.showError('GLTFLoader not available');
          }
          
          // Handle window resize
          window.addEventListener('resize', window.Sappy3D.onWindowResize, false);
          window.Sappy3D.onWindowResize = function() {
            try {
              window.Sappy3D.camera.aspect = window.innerWidth / window.innerHeight;
              window.Sappy3D.camera.updateProjectionMatrix();
              window.Sappy3D.renderer.setSize(window.innerWidth, window.innerHeight);
            } catch (e) {
              console.error('Error in resize handler:', e);
              window.Sappy3D.showError('Resize Error: ' + e.message);
            }
          };
          
          console.log('3D scene initialization complete');
          
        } catch (e) {
          console.error('Error in init function:', e);
          window.Sappy3D.showError('Init Error: ' + e.message);
        }
      };
      
      // Initialize when page loads - with delay to avoid React conflicts
      window.addEventListener('load', function() {
        try {
          console.log('Page loaded, waiting for React to settle...');
          window.Sappy3D.showError('Page loaded, waiting for React to settle...');
          // Wait longer for React to fully initialize
          setTimeout(function() {
            window.Sappy3D.showError('Starting 3D initialization...');
            setTimeout(window.Sappy3D.waitForThree, 1000);
          }, 2000);
        } catch (e) {
          console.error('Error in load handler:', e);
          window.Sappy3D.showError('Load Error: ' + e.message);
        }
      });
      
      // Additional error checking
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded');
        window.Sappy3D.showError('DOM loaded');
      });
    </script>
  </body>
</html>
