<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      rel="preload"
      href="_next/static/media/a34f9d1faa5f3315-s.p.woff2"
      as="font"
      crossorigin=""
      type="font/woff2"
    />
    <link
      rel="stylesheet"
      href="_next/static/css/bde7ed16c3ff486a.css"
      crossorigin=""
      data-precedence="next"
    />
    <link
      rel="preload"
      as="script"
      fetchpriority="low"
      href="_next/static/chunks/webpack-bc04315c01c03d8c.js"
      crossorigin=""
    />
    <script
      src="_next/static/chunks/30b509c0-82089e7b3225ba1b.js"
      async=""
      crossorigin=""
    ></script>
    <style>
        @media (min-width: 1280px) {
    .xl\:px-\[2vw\] {
        padding-left: 2vw;
        padding-right: 2vw;
        margin-bottom: 2% !important;
    }
}
    </style>
    <script
      src="_next/static/chunks/184-23e8ca0fd8eb75aa.js"
      async=""
      crossorigin=""
    ></script>
    <script
      src="_next/static/chunks/main-app-ee5ea468b114ac39.js"
      async=""
      crossorigin=""
    ></script>
    <script
      src="_next/static/chunks/e64ca62e-9ddc06a344c16179.js"
      async=""
    ></script>
    <script src="_next/static/chunks/349-8d6ad2a46252b064.js" async=""></script>
    <script
      src="_next/static/chunks/app/page-b4341840a5519050.js"
      async=""
    ></script>
    <!-- Three.js library - load first, before other scripts -->
    <script>
      // Load Three.js and related scripts in correct order with global THREE
      (function() {
        console.log('Loading Three.js and related scripts...');
        
        // Load Three.js first (creates global THREE)
        var threeScript = document.createElement('script');
        threeScript.src = 'https://cdn.jsdelivr.net/npm/three@0.144.0/build/three.min.js';
        threeScript.onload = function() {
          console.log('Three.js loaded successfully, global THREE available');
          
          // Load GLTFLoader after Three.js (uses global THREE)
          var gltfScript = document.createElement('script');
          gltfScript.src = 'https://cdn.jsdelivr.net/npm/three@0.144.0/examples/js/loaders/GLTFLoader.js';
          gltfScript.onload = function() {
            console.log('GLTFLoader loaded successfully');
            
            // Load OrbitControls after GLTFLoader (uses global THREE)
            var orbitScript = document.createElement('script');
            orbitScript.src = 'https://cdn.jsdelivr.net/npm/three@0.144.0/examples/js/controls/OrbitControls.js';
            orbitScript.onload = function() {
              console.log('OrbitControls loaded successfully');
              
              // Now that all scripts are loaded, move everything to our namespace
              if (typeof THREE !== 'undefined') {
                window.Sappy3D = window.Sappy3D || {};
                window.Sappy3D.THREE = THREE;
                
                // Check if GLTFLoader is available
                if (typeof THREE.GLTFLoader !== 'undefined') {
                  window.Sappy3D.THREE.GLTFLoader = THREE.GLTFLoader;
                  console.log('GLTFLoader moved to Sappy3D namespace');
                } else {
                  console.error('GLTFLoader not found in THREE object');
                }
                
                // Check if OrbitControls is available
                if (typeof THREE.OrbitControls !== 'undefined') {
                  window.Sappy3D.THREE.OrbitControls = THREE.OrbitControls;
                  console.log('OrbitControls moved to Sappy3D namespace');
                } else {
                  console.error('OrbitControls not found in THREE object');
                }
                
                // Keep global THREE available for compatibility
                // Don't delete window.THREE - keep it for other scripts that might need it
                console.log('All Three.js components moved to Sappy3D namespace, global THREE preserved');
              }
            };
            orbitScript.onerror = function() {
              console.error('Failed to load OrbitControls from CDN');
            };
            document.head.appendChild(orbitScript);
          };
          gltfScript.onerror = function() {
            console.error('Failed to load GLTFLoader from CDN');
          };
          document.head.appendChild(gltfScript);
        };
        threeScript.onerror = function() {
          console.error('Failed to load Three.js from CDN, trying alternative...');
          
          // Try alternative CDN
          var threeScript2 = document.createElement('script');
          threeScript2.src = 'https://unpkg.com/three@0.144.0/build/three.min.js';
          threeScript2.onload = function() {
            console.log('Three.js loaded from alternative CDN, global THREE available');
            
            // Load GLTFLoader after Three.js (uses global THREE)
            var gltfScript2 = document.createElement('script');
            gltfScript2.src = 'https://unpkg.com/three@0.144.0/examples/js/loaders/GLTFLoader.js';
            gltfScript2.onload = function() {
              console.log('GLTFLoader loaded from alternative CDN');
              
              // Load OrbitControls after GLTFLoader (uses global THREE)
              var orbitScript2 = document.createElement('script');
              orbitScript2.src = 'https://unpkg.com/three@0.144.0/examples/js/controls/OrbitControls.js';
              orbitScript2.onload = function() {
                console.log('OrbitControls loaded from alternative CDN');
                
                // Now that all scripts are loaded, move everything to our namespace
                if (typeof THREE !== 'undefined') {
                  window.Sappy3D = window.Sappy3D || {};
                  window.Sappy3D.THREE = THREE;
                  
                  // Check if GLTFLoader is available
                  if (typeof THREE.GLTFLoader !== 'undefined') {
                    window.Sappy3D.THREE.GLTFLoader = THREE.GLTFLoader;
                    console.log('GLTFLoader moved to Sappy3D namespace');
                  } else {
                    console.error('GLTFLoader not found in THREE object');
                  }
                  
                  // Check if OrbitControls is available
                  if (typeof THREE.OrbitControls !== 'undefined') {
                    window.Sappy3D.THREE.OrbitControls = THREE.OrbitControls;
                    console.log('OrbitControls moved to Sappy3D namespace');
                  } else {
                    console.error('OrbitControls not found in THREE object');
                  }
                  
                  // Keep global THREE available for compatibility
                  // Don't delete window.THREE - keep it for other scripts that might need it
                  console.log('All Three.js components moved to Sappy3D namespace, global THREE preserved');
                }
              };
              orbitScript2.onerror = function() {
                console.error('Failed to load OrbitControls from alternative CDN');
              };
              document.head.appendChild(orbitScript2);
            };
            gltfScript2.onerror = function() {
              console.error('Failed to load GLTFLoader from alternative CDN');
            };
            document.head.appendChild(gltfScript2);
          };
          threeScript2.onerror = function() {
            console.error('All Three.js CDN attempts failed');
          };
          document.head.appendChild(threeScript2);
        };
        document.head.appendChild(threeScript);
      })();
    </script>
    <!-- Remove local OrbitControls since we're loading from CDN -->
    <!-- <script src="OrbitControls.js"></script> -->
    <title>Sappy</title>
    <meta name="description" content="Shaping the future of the internet." />
    <meta property="og:title" content="Sappy" />
    <meta
      property="og:description"
      content="Shaping the future of the internet."
    />
    <meta property="og:image:type" content="image/png" />
    <meta property="og:image:width" content="596" />
    <meta property="og:image:height" content="526" />
    <meta
      property="og:image:alt"
      content="Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"
    />
    <meta
      property="og:image"
      content="https://sappy-55yojjbv1-sappyseals.vercel.app/opengraph-image.png?cbb77dec1be36bc9"
    />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Sappy" />
    <meta
      name="twitter:description"
      content="Shaping the future of the internet."
    />
    <meta name="twitter:image:type" content="image/png" />
    <meta name="twitter:image:width" content="596" />
    <meta name="twitter:image:height" content="526" />
    <meta
      name="twitter:image:alt"
      content="Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"
    />
    <meta
      name="twitter:image"
      content="https://sappy-55yojjbv1-sappyseals.vercel.app/twitter-image.png?cbb77dec1be36bc9"
    />
    <link rel="icon" href="favicon.ico" type="image/x-icon" sizes="176x176" />
    <link
      rel="icon"
      href="icon.png?b7595f33cbcd2108"
      type="image/png"
      sizes="176x176"
    />
    <link
      rel="apple-touch-icon"
      href="apple-icon.png?b7595f33cbcd2108"
      type="image/png"
      sizes="176x176"
    />
    <meta name="next-size-adjust" />
    <script
      src="_next/static/chunks/polyfills-c67a75d1b6f99dc8.js"
      crossorigin=""
      nomodule=""
    ></script>
    <style>
      #cursor-line {
        position: fixed;
        top: 0;
        left: 0;
        width: 1px;
        height: 100%;
        background-color: black;
        pointer-events: none;
        z-index: 10000;
        opacity: 0.5;
        transition: left 0.05s linear;
      }
    </style>
    <style>
      #page-loader {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: black;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 2em;
        font-family: Arial, sans-serif;
        z-index: 99999;
        transition: opacity 0.5s ease;
      }
    </style>
  </head>
  <body class="__className_d65c78">
    <div id="page-loader">
      <div>Page Loading...</div>
    </div>
    <div id="cursor-line"></div>
    <main
      class="relative bg-white w-screen h-screen overflow-clip text-black"
      style="height: 100svh"
    >
      <!-- 3D Scene Container -->
      <div id="three-container" class="absolute inset-0 z-15"></div>
      <div style="width: 100%; height: 100%" class="absolute inset-0 z-0">
        <canvas style="display: none"></canvas>
      </div>
      
      <!-- Interaction hint -->
      <div id="interaction-hint" class="absolute top-4 left-4 z-30 bg-black bg-opacity-50 text-white px-3 py-2 rounded-lg text-sm pointer-events-none opacity-75">
        💡 Перетащите мышкой для вращения камеры вокруг персонажа
      </div>
      <div
        class="absolute flex flex-col gap-3 bottom-0 bg-transparent h-fit justify-between w-full px-[5vw] md:px-[3vw] xl:px-[2vw] pb-3 z-20 "
        style="
    margin-bottom: 2% !important;">
        <hr class="h-[1px] border-current w-full" />
        <div class="flex flex-row items-center">
          <p class="whitespace-nowrap text-[3vw] md:text-lg">Sappy</p>
          <div
            class="flex flex-row w-full gap-2 items-center justify-end text-[2.5vw] md:text-base md:gap-3"
          >
            <a class="relative" href="index.htm"
              ><hr
                class="h-[1px] absolute bottom-0 left-0 w-full border-current"
              />
              Home</a
            ><a class="relative underline-animation" href="seals.html">Seals</a
            ><a class="relative underline-animation" href="seals/staking.html"
              >Dashboard</a
            >
            <a class="relative underline-animation" href="omnia.html">Omnia</a>
            <a class="relative underline-animation" href="mememachine/">Meme Machine</a>
          </div>
        </div>
      </div>
    </main>
    <script
      src="_next/static/chunks/webpack-bc04315c01c03d8c.js"
      crossorigin=""
      async=""
    ></script>
    <script>
      (self.__next_f = self.__next_f || []).push([0]);
      self.__next_f.push([2, null]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '1:HL["/_next/static/media/a34f9d1faa5f3315-s.p.woff2","font",{"crossOrigin":"","type":"font/woff2"}]\n2:HL["/_next/static/css/bde7ed16c3ff486a.css","style",{"crossOrigin":""}]\n0:"$L3"\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '4:I[9070,[],""]\n6:I[6993,[],""]\n7:I[2086,["959","static/chunks/e64ca62e-9ddc06a344c16179.js","349","static/chunks/349-8d6ad2a46252b064.js","931","static/chunks/app/page-b4341840a5519050.js"],""]\n8:I[2070,[],""]\n9:I[8932,[],""]\nb:I[4357,[],""]\nc:[]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        '3:[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/bde7ed16c3ff486a.css","precedence":"next","crossOrigin":""}]],["$","$L4",null,{"buildId":"GxKkQzvljs9zXyE41YhKe","assetPrefix":"","initialCanonicalUrl":"/","initialTree":["",{"children":["__PAGE__",{}]},"$undefined","$undefined",true],"initialSeedData":["",{"children":["__PAGE__",{},["$L5",["$","$L6",null,{"propsForComponent":{"params":{}},"Component":"$7","isStaticGeneration":true}],null]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"className":"__className_d65c78","children":["$","$L8",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L9",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\\"Segoe UI\\",Roboto,Helvetica,Arial,sans-serif,\\"Apple Color Emoji\\",\\"Segoe UI Emoji\\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}],"notFoundStyles":[],"styles":null}]}]}],null]],"initialHead":[false,"$La"],"globalErrorComponent":"$b","missingSlots":"$Wc"}]]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([
        1,
        'a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Sappy"}],["$","meta","3",{"name":"description","content":"Shaping the future of the internet."}],["$","meta","4",{"property":"og:title","content":"Sappy"}],["$","meta","5",{"property":"og:description","content":"Shaping the future of the internet."}],["$","meta","6",{"property":"og:image:type","content":"image/png"}],["$","meta","7",{"property":"og:image:width","content":"596"}],["$","meta","8",{"property":"og:image:height","content":"526"}],["$","meta","9",{"property":"og:image:alt","content":"Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"}],["$","meta","10",{"property":"og:image","content":"https://sappy-55yojjbv1-sappyseals.vercel.app/opengraph-image.png?cbb77dec1be36bc9"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"Sappy"}],["$","meta","13",{"name":"twitter:description","content":"Shaping the future of the internet."}],["$","meta","14",{"name":"twitter:image:type","content":"image/png"}],["$","meta","15",{"name":"twitter:image:width","content":"596"}],["$","meta","16",{"name":"twitter:image:height","content":"526"}],["$","meta","17",{"name":"twitter:image:alt","content":"Iconic Sappy Seals face, featuring large round eyes, whiskers, and a cute, smiling mouth"}],["$","meta","18",{"name":"twitter:image","content":"https://sappy-55yojjbv1-sappyseals.vercel.app/twitter-image.png?cbb77dec1be36bc9"}],["$","link","19",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"176x176"}],["$","link","20",{"rel":"icon","href":"/icon.png?b7595f33cbcd2108","type":"image/png","sizes":"176x176"}],["$","link","21",{"rel":"apple-touch-icon","href":"/apple-icon.png?b7595f33cbcd2108","type":"image/png","sizes":"176x176"}],["$","meta","22",{"name":"next-size-adjust"}]]\n',
      ]);
    </script>
    <script>
      self.__next_f.push([1, "5:null\n"]);
    </script>
    <script>
      self.__next_f.push([1, ""]);
    </script>
    
    <!-- 3D Character Script -->
    <script>
      // Create isolated namespace for 3D functionality
      window.Sappy3D = window.Sappy3D || {};
      
      // Global error handler - only for our 3D code
      window.Sappy3D.errorHandler = function(e) {
        // Only handle errors from our 3D code, not React
        if (e.filename && e.filename.includes('three') || 
            e.filename && e.filename.includes('GLTF') ||
            e.filename && e.filename.includes('OrbitControls')) {
          console.error('3D Error caught:', e.error);
          console.error('Error message:', e.message);
          console.error('Error filename:', e.filename);
          console.error('Error line:', e.lineno);
          console.error('Error column:', e.colno);
          console.error('Error stack:', e.error ? e.error.stack : 'No stack trace');
          
          // Display error on screen
          window.Sappy3D.showError('3D Error: ' + e.message + ' at ' + e.filename + ':' + e.lineno);
        }
      };
      
      // Only add error handler if it doesn't conflict with React
      if (!window.Sappy3D.errorHandlerAdded) {
        window.addEventListener('error', window.Sappy3D.errorHandler);
        window.Sappy3D.errorHandlerAdded = true;
      }
      
      // Unhandled promise rejection handler - only for our 3D code
      window.Sappy3D.promiseHandler = function(e) {
        if (e.reason && typeof e.reason === 'string' && 
            (e.reason.includes('three') || e.reason.includes('GLTF') || e.reason.includes('OrbitControls'))) {
          console.error('3D Promise rejection:', e.reason);
          window.Sappy3D.showError('3D Promise Error: ' + e.reason);
        }
      };
      
      if (!window.Sappy3D.promiseHandlerAdded) {
        window.addEventListener('unhandledrejection', window.Sappy3D.promiseHandler);
        window.Sappy3D.promiseHandlerAdded = true;
      }
      
      // Function to show errors on screen
      window.Sappy3D.showError = function(message) {
        let errorDiv = document.getElementById('sappy-3d-error-display');
        if (!errorDiv) {
          errorDiv = document.createElement('div');
          errorDiv.id = 'sappy-3d-error-display';
          errorDiv.style.cssText = `
            position: fixed;
            top: 10px;
            left: 10px;
            right: 10px;
            background: #ff6600;
            color: white;
            padding: 15px;
            border-radius: 5px;
            font-family: monospace;
            font-size: 12px;
            z-index: 10000;
            max-height: 200px;
            overflow-y: auto;
            word-wrap: break-word;
            border: 2px solid #cc4400;
          `;
          document.body.appendChild(errorDiv);
        }
        errorDiv.innerHTML += '<div style="margin-bottom: 10px; border-bottom: 1px solid white; padding-bottom: 5px;">' + message + '</div>';
      };
      
      // Diagnostic function
      window.Sappy3D.runDiagnostics = function() {
        console.log('=== SAPPY 3D DIAGNOSTICS START ===');
        
        // Check if THREE is available
        console.log('THREE object available:', typeof window.Sappy3D.THREE !== 'undefined');
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          const THREE = window.Sappy3D.THREE;
          console.log('THREE version:', THREE.REVISION);
        }
        
        // Check if OrbitControls is available
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          console.log('THREE.OrbitControls available:', typeof window.Sappy3D.THREE.OrbitControls !== 'undefined');
        }
        
        // Check if GLTFLoader is available
        if (typeof window.Sappy3D.THREE !== 'undefined') {
          console.log('THREE.GLTFLoader available:', typeof window.Sappy3D.THREE.GLTFLoader !== 'undefined');
        }
        
        // Check if container exists
        const container = document.getElementById('three-container');
        console.log('Container element exists:', !!container);
        
        // Check WebGL support
        try {
          const canvas = document.createElement('canvas');
          const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
          console.log('WebGL supported:', !!gl);
        } catch (e) {
          console.log('WebGL check failed:', e);
        }
        
        console.log('=== SAPPY 3D DIAGNOSTICS END ===');
      };
      
      // Wait for all scripts to load
      window.Sappy3D.waitForThree = function() {
        try {
          if (typeof window.Sappy3D.THREE !== 'undefined' && 
              typeof window.Sappy3D.THREE.GLTFLoader !== 'undefined' && 
              typeof window.Sappy3D.THREE.OrbitControls !== 'undefined') {
            console.log('All Three.js components loaded successfully');
            window.Sappy3D.runDiagnostics();
            window.Sappy3D.waitForMainAndInit();
          } else {
            setTimeout(window.Sappy3D.waitForThree, 100);
          }
        } catch (e) {
          console.error('Error in waitForThree:', e);
          window.Sappy3D.showError('Error in waitForThree: ' + e.message);
        }
      };
      
      // Wait for main element to be available
      window.Sappy3D.waitForMainAndInit = function() {
        try {
          // Try multiple selectors to find the main element
          let main = document.querySelector('main');
          if (!main) {
            main = document.querySelector('[class*="main"]');
          }
          if (!main) {
            main = document.querySelector('[class*="bg-white"]');
          }
          if (!main) {
            main = document.querySelector('[class*="relative"]');
          }
          
          if (!main) {
            // Wait longer and try again, but with a timeout
            if (!window.Sappy3D.waitCount) {
              window.Sappy3D.waitCount = 0;
            }
            window.Sappy3D.waitCount++;
            
            // If we've waited too long, just initialize anyway
            if (window.Sappy3D.waitCount > 20) { // 10 seconds
              console.log('Main element not found after 10 seconds, initializing anyway...');
              window.Sappy3D.init();
              return;
            }
            
            setTimeout(window.Sappy3D.waitForMainAndInit, 500);
            return;
          }
          
          // Initialize 3D scene
          window.Sappy3D.init();
        } catch (e) {
          console.error('Error in waitForMainAndInit:', e);
          window.Sappy3D.showError('Error in waitForMainAndInit: ' + e.message);
        }
      };
      
      // Initialize Three.js scene
      window.Sappy3D.scene = null;
      window.Sappy3D.camera = null;
      window.Sappy3D.renderer = null;
      window.Sappy3D.character = null;
      window.Sappy3D.controls = null;
      window.Sappy3D.mixer = null; // For animations
      window.Sappy3D.clock = null; // For animations
      
      window.Sappy3D.init = function() {
        try {
          // Check if THREE is available
          if (typeof window.Sappy3D.THREE === 'undefined') {
            throw new Error('THREE.js not available');
          }
          
          const THREE = window.Sappy3D.THREE;
          console.log('Initializing 3D scene...');
          
          // Create scene
          window.Sappy3D.scene = new THREE.Scene();
          window.Sappy3D.scene.background = new THREE.Color(0xffffff);
          window.Sappy3D.scene.fog = null; // Disable fog
          
          // Create camera
          window.Sappy3D.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 100); // Tighter near/far planes
          window.Sappy3D.camera.position.set(0, 1.5, 4);
          window.Sappy3D.camera.updateProjectionMatrix();
          
          // Find or create container
          let container = document.getElementById('three-container');
          if (!container) {
            container = document.createElement('div');
            container.id = 'three-container';
            container.style.cssText = `
              position: absolute;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              z-index: 15;
            `;
            
            // Try to add to main element first, fallback to body
            const main = document.querySelector('main');
            if (main) {
              main.insertBefore(container, main.firstChild);
            } else {
              // Fallback to body if main doesn't exist
              document.body.insertBefore(container, document.body.firstChild);
            }
          }
          
          // Create renderer
          window.Sappy3D.renderer = new THREE.WebGLRenderer({ 
            antialias: true, 
            alpha: true,
            powerPreference: "high-performance",
            stencil: false,
            depth: true,
            logarithmicDepthBuffer: true, // Enable for better depth precision
            preserveDrawingBuffer: false,
            failIfMajorPerformanceCaveat: false
          });
          window.Sappy3D.renderer.setSize(window.innerWidth, window.innerHeight);
          window.Sappy3D.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Limit pixel ratio
          window.Sappy3D.renderer.shadowMap.enabled = false; // Отключаем тени для стабильности
          window.Sappy3D.renderer.outputEncoding = THREE.sRGBEncoding; // Правильная настройка для GLB
          window.Sappy3D.renderer.toneMapping = THREE.ACESFilmicToneMapping;
          window.Sappy3D.renderer.toneMappingExposure = 1.0;
          container.appendChild(window.Sappy3D.renderer.domElement);
          
          // Add improved lights based on user feedback
          const ambientLight = new THREE.AmbientLight(0xffffff, 0.6); // Увеличиваем интенсивность
          window.Sappy3D.scene.add(ambientLight);
          
          const directionalLight = new THREE.DirectionalLight(0xffffff, 1.2); // Увеличиваем интенсивность
          directionalLight.position.set(5, 10, 5); // Правильная позиция
          directionalLight.castShadow = false; // Отключаем тени
          window.Sappy3D.scene.add(directionalLight);

          console.log('Lights added - Directional and Ambient with proper intensity');
          
          // Add a simple cube for testing - без теней
          const geometry = new THREE.BoxGeometry(1, 1, 1);
          const material = new THREE.MeshLambertMaterial({ color: 0x00ff00 }); // Используем Lambert вместо Phong
          const cube = new THREE.Mesh(geometry, material);
          cube.castShadow = false; // Отключаем тени
          cube.receiveShadow = false; // Отключаем тени
          window.Sappy3D.scene.add(cube);
          console.log('Test cube added - no shadows');
          
          // Check if OrbitControls is available
          if (typeof window.Sappy3D.THREE.OrbitControls !== 'undefined') {
            console.log('OrbitControls is available');
            try {
              // Add orbit controls with room-like camera rotation
              window.Sappy3D.controls = new window.Sappy3D.THREE.OrbitControls(window.Sappy3D.camera, window.Sappy3D.renderer.domElement);
              window.Sappy3D.controls.enableDamping = true;
              window.Sappy3D.controls.dampingFactor = 0.05; // Более отзывчивое управление
              window.Sappy3D.controls.enableZoom = false; // Disable zoom
              window.Sappy3D.controls.enablePan = false; // Disable pan
              window.Sappy3D.controls.autoRotate = false; // Disable auto rotation
              window.Sappy3D.controls.enableRotate = true; // Enable manual rotation
              window.Sappy3D.controls.rotateSpeed = 0.7; // More reasonable speed like in example
              window.Sappy3D.controls.minDistance = 4; // Fixed distance
              window.Sappy3D.controls.maxDistance = 4; // Fixed distance
              window.Sappy3D.controls.minPolarAngle = Math.PI / 3; // 60 degrees up like in example
              window.Sappy3D.controls.maxPolarAngle = Math.PI / 1.5; // 120 degrees down like in example
              window.Sappy3D.controls.zoomSpeed = 0; // Disable zoom speed
              window.Sappy3D.controls.screenSpacePanning = false; // Better for room-like rotation
              
              // Remove DragControls - we don't need it anymore
              window.Sappy3D.dragControls = null;
              
              // Упрощенные обработчики событий
              window.Sappy3D.renderer.domElement.style.cursor = 'grab';
              
              // Один обработчик для всех событий мыши
              window.Sappy3D.renderer.domElement.addEventListener('mousedown', function(event) {
                window.Sappy3D.renderer.domElement.style.cursor = 'grabbing';
                
                // Hide interaction hint after first interaction
                const hint = document.getElementById('interaction-hint');
                if (hint) {
                  hint.style.opacity = '0';
                  setTimeout(function() {
                    hint.style.display = 'none';
                  }, 500);
                }
              });
              
              window.Sappy3D.renderer.domElement.addEventListener('mouseup', function(event) {
                window.Sappy3D.renderer.domElement.style.cursor = 'grab';
              });
              
              window.Sappy3D.renderer.domElement.addEventListener('mousemove', function(event) {
                if (event.buttons > 0) {
                  // Mouse move with button pressed
                }
              });
              
              // Touch support
              window.Sappy3D.renderer.domElement.addEventListener('touchstart', function(event) {
                // Hide interaction hint after first interaction
                const hint = document.getElementById('interaction-hint');
                if (hint) {
                  hint.style.opacity = '0';
                  setTimeout(function() {
                    hint.style.display = 'none';
                  }, 500);
                }
              });
              
              // Add click interaction with the model
              window.Sappy3D.raycaster = new window.Sappy3D.THREE.Raycaster();
              window.Sappy3D.mouse = new window.Sappy3D.THREE.Vector2();
              
              window.Sappy3D.renderer.domElement.addEventListener('click', function(event) {
                // Calculate mouse position in normalized device coordinates
                const rect = window.Sappy3D.renderer.domElement.getBoundingClientRect();
                window.Sappy3D.mouse.x = ((event.clientX - rect.left) / rect.width) * 2 - 1;
                window.Sappy3D.mouse.y = -((event.clientY - rect.top) / rect.height) * 2 + 1;
                
                // Check for intersections with the character model
                if (window.Sappy3D.character) {
                  window.Sappy3D.raycaster.setFromCamera(window.Sappy3D.mouse, window.Sappy3D.camera);
                  const intersects = window.Sappy3D.raycaster.intersectObject(window.Sappy3D.character, true);
                  
                  if (intersects.length > 0) {
                    console.log('Clicked on character!');
                    // Add a small bounce effect when clicked
                    const originalScale = window.Sappy3D.character.scale.clone();
                    window.Sappy3D.character.scale.multiplyScalar(1.1);
                    setTimeout(function() {
                      window.Sappy3D.character.scale.copy(originalScale);
                    }, 200);
                  }
                }
              });
              
              // Стабильный анимационный цикл с оптимизацией производительности
              let lastTime = 0;
              const targetFPS = 60;
              const frameInterval = 1000 / targetFPS;
              
              function animate(currentTime) {
                requestAnimationFrame(animate);
                
                // FPS limiting
                if (currentTime - lastTime < frameInterval) {
                  return;
                }
                lastTime = currentTime;
                
                // Skip rendering if tab is not visible
                if (document.hidden) {
                  return;
                }
                
                // Update animation mixer
                if (window.Sappy3D.mixer && window.Sappy3D.clock) {
                  window.Sappy3D.mixer.update(window.Sappy3D.clock.getDelta());
                }

                // Обновляем контролы строго один раз
                if (window.Sappy3D.controls && window.Sappy3D.controls.update) {
                  window.Sappy3D.controls.update();
                }

                // Принудительно обновляем матрицу камеры после контролов
                if (window.Sappy3D.camera) {
                  window.Sappy3D.camera.updateMatrixWorld();
                }
                
                // Рендерим сцену
                if (window.Sappy3D.scene && window.Sappy3D.camera && window.Sappy3D.renderer) {
                  window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
                }
              }
              
              // Запускаем анимацию
              animate();
            } catch (e) {
              console.error('Error creating OrbitControls:', e);
              window.Sappy3D.showError('OrbitControls Error: ' + e.message);
              // Fallback к простому рендеру
              console.log('Falling back to simple render only');
              
              function animate() {
                requestAnimationFrame(animate);
                
                if (window.Sappy3D.scene && window.Sappy3D.camera && window.Sappy3D.renderer) {
                  window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
                }
              }
              
              animate();
            }
          } else {
            console.log('OrbitControls not available, using simple render only');
            
            function animate() {
              requestAnimationFrame(animate);
              
              if (window.Sappy3D.scene && window.Sappy3D.camera && window.Sappy3D.renderer) {
                window.Sappy3D.renderer.render(window.Sappy3D.scene, window.Sappy3D.camera);
              }
            }
            
            animate();
          }
          
          // Function to hide the main page loader
          window.Sappy3D.hidePageLoader = function() {
            const pageLoader = document.getElementById('page-loader');
            if (pageLoader) {
              pageLoader.style.opacity = '0';
              setTimeout(() => {
                pageLoader.style.display = 'none';
              }, 500); // Match transition duration
            }
          };

          // Check if GLTFLoader is available
          if (typeof window.Sappy3D.THREE.GLTFLoader !== 'undefined') {
            console.log('Loading 3D model...');
            
            // Create loading indicator
            const loadingDiv = document.createElement('div');
            loadingDiv.id = 'model-loading';
            loadingDiv.style.cssText = `
              position: fixed;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              background: rgba(0, 0, 0, 0.8);
              color: white;
              padding: 20px;
              border-radius: 10px;
              font-family: Arial, sans-serif;
              z-index: 1000;
              text-align: center;
            `;
            loadingDiv.innerHTML = `
              <div style="margin-bottom: 10px;">🔄 Загрузка 3D модели...</div>
              <div id="loading-progress" style="font-size: 12px;">0%</div>
            `;
            document.body.appendChild(loadingDiv);
            
            // Load GLB model
            const loader = new window.Sappy3D.THREE.GLTFLoader();
            loader.load(
              'base_basic_shaded.glb',
              function (gltf) {
                try {
                  console.log('Model loaded successfully');
                  
                  // Hide page loader
                  window.Sappy3D.hidePageLoader();

                  // Remove loading indicator
                  const loadingDiv = document.getElementById('model-loading');
                  if (loadingDiv) {
                    loadingDiv.remove();
                  }
                  
                  window.Sappy3D.character = gltf.scene;
                  window.Sappy3D.character.scale.set(1, 1, 1);
                  window.Sappy3D.character.position.set(0, 0, 0);
                  
                  // НЕ изменяем материалы - используем оригинальные из GLB
                  console.log('Using original materials from GLB file');
                  
                  window.Sappy3D.scene.add(window.Sappy3D.character);
                  
                  // Remove test cube
                  window.Sappy3D.scene.remove(cube);
                  
                  // Setup animation mixer
                  if (gltf.animations && gltf.animations.length) {
                    window.Sappy3D.clock = new window.Sappy3D.THREE.Clock();
                    window.Sappy3D.mixer = new window.Sappy3D.THREE.AnimationMixer(window.Sappy3D.character);
                    const action = window.Sappy3D.mixer.clipAction(gltf.animations[0]);
                    action.play();
                    console.log('Animation started');
                  } else {
                    console.log('No animations found in the model');
                  }
                  
                  // Center camera on character
                  const box = new THREE.Box3().setFromObject(window.Sappy3D.character);
                  const center = box.getCenter(new THREE.Vector3());
                  const size = box.getSize(new THREE.Vector3());
                  const maxDim = Math.max(size.x, size.y, size.z);
                  const fov = window.Sappy3D.camera.fov * (Math.PI / 180);
                  let cameraZ = Math.abs(maxDim / 2 / Math.tan(fov / 2));
                  
                  // Устанавливаем начальную позицию камеры только один раз
                  window.Sappy3D.camera.position.set(0, 1.5, cameraZ * 1.5);
                  
                  // Настраиваем OrbitControls target
                  if (typeof window.Sappy3D.THREE.OrbitControls !== 'undefined' && window.Sappy3D.controls) {
                    window.Sappy3D.controls.target.copy(center);
                    // НЕ вызываем controls.update() здесь - это сделает анимационный цикл
                  }
                  
                  console.log('Character model setup complete');
                } catch (e) {
                  console.error('Error setting up character model:', e);
                  window.Sappy3D.showError('Character Setup Error: ' + e.message);
                  window.Sappy3D.showFallbackModel();
                  // Hide page loader even if model fails
                  window.Sappy3D.hidePageLoader();
                }
              },
              function (xhr) {
                const progress = Math.round((xhr.loaded / xhr.total * 100));
                
                // Update loading progress
                const progressDiv = document.getElementById('loading-progress');
                if (progressDiv) {
                  progressDiv.textContent = progress + '%';
                }
              },
              function (error) {
                console.error('An error happened loading the model:', error);
                window.Sappy3D.showError('Model Load Error: ' + error.message);
                
                // Remove loading indicator
                const loadingDiv = document.getElementById('model-loading');
                if (loadingDiv) {
                  loadingDiv.remove();
                }
                
                // Show fallback model
                window.Sappy3D.showFallbackModel();
                // Hide page loader even if model fails
                window.Sappy3D.hidePageLoader();
              }
            );
          } else {
            console.error('GLTFLoader not available');
            window.Sappy3D.showError('GLTFLoader not available');
            window.Sappy3D.showFallbackModel();
            // Hide page loader even if GLTFLoader is not available
            window.Sappy3D.hidePageLoader();
          }
          
          // Fallback function for when model fails to load
          window.Sappy3D.showFallbackModel = function() {
            console.log('Showing fallback model');
            
            const THREE = window.Sappy3D.THREE;
            
            // Create a simple character-like fallback
            const group = new THREE.Group();
            
            // Body (cylinder)
            const bodyGeometry = new THREE.CylinderGeometry(0.5, 0.5, 1.5, 8);
            const bodyMaterial = new THREE.MeshLambertMaterial({ color: 0x4a90e2 });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            body.position.y = 0.75;
            group.add(body);
            
            // Head (sphere)
            const headGeometry = new THREE.SphereGeometry(0.4, 8, 6);
            const headMaterial = new THREE.MeshLambertMaterial({ color: 0xfdbcb4 });
            const head = new THREE.Mesh(headGeometry, headMaterial);
            head.position.y = 1.8;
            group.add(head);
            
            // Eyes
            const eyeGeometry = new THREE.SphereGeometry(0.05, 4, 4);
            const eyeMaterial = new THREE.MeshLambertMaterial({ color: 0x000000 });
            const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            leftEye.position.set(-0.15, 1.9, 0.3);
            rightEye.position.set(0.15, 1.9, 0.3);
            group.add(leftEye);
            group.add(rightEye);
            
            // Arms
            const armGeometry = new THREE.CylinderGeometry(0.1, 0.1, 0.8, 6);
            const armMaterial = new THREE.MeshLambertMaterial({ color: 0xfdbcb4 });
            const leftArm = new THREE.Mesh(armGeometry, armMaterial);
            const rightArm = new THREE.Mesh(armGeometry, armMaterial);
            leftArm.position.set(-0.7, 0.8, 0);
            rightArm.position.set(0.7, 0.8, 0);
            leftArm.rotation.z = Math.PI / 4;
            rightArm.rotation.z = -Math.PI / 4;
            group.add(leftArm);
            group.add(rightArm);
            
            window.Sappy3D.character = group;
            window.Sappy3D.scene.add(window.Sappy3D.character);
            
            // Remove test cube
            window.Sappy3D.scene.remove(cube);
            
            // Center camera on fallback model
            const box = new THREE.Box3().setFromObject(window.Sappy3D.character);
            const center = box.getCenter(new THREE.Vector3());
            
            // Настраиваем OrbitControls target
            if (typeof window.Sappy3D.THREE.OrbitControls !== 'undefined' && window.Sappy3D.controls) {
              window.Sappy3D.controls.target.copy(center);
            }
            
            console.log('Fallback model created');
          };
          
          // Handle window resize
          window.addEventListener('resize', window.Sappy3D.onWindowResize, false);
          window.Sappy3D.onWindowResize = function() {
            try {
              window.Sappy3D.camera.aspect = window.innerWidth / window.innerHeight;
              window.Sappy3D.camera.updateProjectionMatrix();
              window.Sappy3D.renderer.setSize(window.innerWidth, window.innerHeight);
              // НЕ вызываем controls.update() здесь - это сделает анимационный цикл
            } catch (e) {
              console.error('Error in resize handler:', e);
              window.Sappy3D.showError('Resize Error: ' + e.message);
            }
          };
          
          console.log('3D scene initialization complete');
          
        } catch (e) {
          console.error('Error in init function:', e);
          window.Sappy3D.showError('Init Error: ' + e.message);
        }
      };
      
      // Initialize when page loads - with delay to avoid React conflicts
      window.addEventListener('load', function() {
        try {
          // Wait for React to initialize, then start 3D
          setTimeout(function() {
            setTimeout(window.Sappy3D.waitForThree, 500);
          }, 1000);
        } catch (e) {
          console.error('Error in load handler:', e);
          window.Sappy3D.showError('Load Error: ' + e.message);
        }
      });
      
      // Additional error checking
      document.addEventListener('DOMContentLoaded', function() {
        console.log('DOM loaded');
      });
    </script>
    <script>
      // Black line following cursor
      document.addEventListener('mousemove', function(event) {
        const line = document.getElementById('cursor-line');
        if (line) {
          line.style.left = event.clientX + 'px';
        }
      });
    </script>
  </body>
</html>
